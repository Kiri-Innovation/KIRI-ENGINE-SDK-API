// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KIRIEngineSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Combine
import CommonCrypto
import CoreMedia
import Foundation
@_exported import KIRIEngineSDK
import SceneKit.ModelIO
import SceneKit
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct KiriEncrypt {
  public static let rsa: KIRIEngineSDK.RSAKiriEncrypt
}
public struct RSAKiriEncrypt {
  public func verify(message: Swift.String, signature: Swift.String) -> Swift.Bool
}
extension CoreMedia.CMTime {
  public var fps: CoreFoundation.CGFloat {
    get
  }
  public var time: CoreFoundation.CGFloat {
    get
  }
}
public enum SwiftyRSAError : Swift.Error {
  case pemDoesNotContainKey
  case keyRepresentationFailed(error: CoreFoundation.CFError?)
  case keyGenerationFailed(error: CoreFoundation.CFError?)
  case keyCreateFailed(error: CoreFoundation.CFError?)
  case keyAddFailed(status: Darwin.OSStatus)
  case keyCopyFailed(status: Darwin.OSStatus)
  case tagEncodingFailed
  case asn1ParsingFailed
  case invalidAsn1RootNode
  case invalidAsn1Structure
  case invalidBase64String
  case chunkDecryptFailed(index: Swift.Int)
  case chunkEncryptFailed(index: Swift.Int)
  case stringToDataConversionFailed
  case dataToStringConversionFailed
  case invalidDigestSize(digestSize: Swift.Int, maxChunkSize: Swift.Int)
  case signatureCreateFailed(status: Darwin.OSStatus)
  case signatureVerifyFailed(status: Darwin.OSStatus)
  case pemFileNotFound(name: Swift.String)
  case derFileNotFound(name: Swift.String)
  case notAPublicKey
  case notAPrivateKey
  case x509CertificateFailed
}
@objc @_inheritsConvenienceInitializers open class CaptureModel : ObjectiveC.NSObject {
  public var device: AVFoundation.AVCaptureDevice? {
    get
  }
  final public let photoOutput: AVFoundation.AVCapturePhotoOutput
  final public let videoOutput: AVFoundation.AVCaptureMovieFileOutput
  @objc required override dynamic public init()
  open func selectFormat(device: AVFoundation.AVCaptureDevice) throws
  @objc deinit
}
public enum EnvType {
  case test
  case product
  public static func == (a: KIRIEngineSDK.EnvType, b: KIRIEngineSDK.EnvType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum KIRIEngineSDKErrorType : Swift.Error {
  case accountNotExist
  case authentication
  case exhausted
  case SDK
  case uninitialized
  case denied
  public static func == (a: KIRIEngineSDK.KIRIEngineSDKErrorType, b: KIRIEngineSDK.KIRIEngineSDKErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class KIRISDK {
  public typealias Completion = (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void
  public static let share: KIRIEngineSDK.KIRISDK
  public func setup(envType: KIRIEngineSDK.EnvType, appKey: Swift.String, completion: @escaping KIRIEngineSDK.KIRISDK.Completion)
  @objc deinit
}
public class Signature {
  public enum DigestType {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public static func == (a: KIRIEngineSDK.Signature.DigestType, b: KIRIEngineSDK.Signature.DigestType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  convenience public init(base64Encoded base64String: Swift.String) throws
  public var base64String: Swift.String {
    get
  }
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class SceneView : SceneKit.SCNView, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, options: [Swift.String : Any]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func loadScene(modelUrl: Foundation.URL, textureUrl: Foundation.URL)
  @objc deinit
}
extension Foundation.Data {
  public func prependx509Header() -> Foundation.Data
  public func hasX509Header() throws -> Swift.Bool
  public func isAnHeaderlessKey() throws -> Swift.Bool
}
public typealias Padding = Security.SecPadding
public enum SwiftyRSA {
}
public protocol Key : AnyObject {
  var reference: Security.SecKey { get }
  var originalData: Foundation.Data? { get }
  init(data: Foundation.Data) throws
  init(reference: Security.SecKey) throws
  init(base64Encoded base64String: Swift.String) throws
  init(pemEncoded pemString: Swift.String) throws
  init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  func pemString() throws -> Swift.String
  func data() throws -> Foundation.Data
  func base64String() throws -> Swift.String
}
extension KIRIEngineSDK.Key {
  public func base64String() throws -> Swift.String
  public func data() throws -> Foundation.Data
  public init(base64Encoded base64String: Swift.String) throws
  public init(pemEncoded pemString: Swift.String) throws
  public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
  public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
}
@objc @_inheritsConvenienceInitializers open class AdvanceImageCaptureModel : KIRIEngineSDK.ImageCaptureModel {
  public enum ValueType<T> : Swift.Equatable where T : Swift.Equatable {
    case value(T)
    case auto
    public static func == (a: KIRIEngineSDK.AdvanceImageCaptureModel.ValueType<T>, b: KIRIEngineSDK.AdvanceImageCaptureModel.ValueType<T>) -> Swift.Bool
  }
  public var isOpenAdvance: Swift.Bool {
    get
    set
  }
  public var isoValue: KIRIEngineSDK.AdvanceImageCaptureModel.ValueType<CoreFoundation.CGFloat> {
    get
    set
  }
  public var shutterValue: KIRIEngineSDK.AdvanceImageCaptureModel.ValueType<CoreFoundation.CGFloat> {
    get
    set
  }
  public var evValue: CoreFoundation.CGFloat {
    get
    set
  }
  public var isoRange: Swift.ClosedRange<CoreFoundation.CGFloat>?
  public var shutterRange: Swift.ClosedRange<CoreFoundation.CGFloat>?
  @objc required dynamic public init()
  final public let isoValueSubject: Combine.PassthroughSubject<CoreFoundation.CGFloat, Swift.Never>
  final public let shutterSubject: Combine.PassthroughSubject<CoreFoundation.CGFloat, Swift.Never>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AVCapturePhotoCaptureProxyDelegate : ObjectiveC.NSObject, AVFoundation.AVCapturePhotoCaptureDelegate {
  final public let photoOutputWillBeginSubject: Combine.PassthroughSubject<(output: AVFoundation.AVCapturePhotoOutput, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings), Swift.Never>
  final public let photoOutputWillCaptureSubject: Combine.PassthroughSubject<(output: AVFoundation.AVCapturePhotoOutput, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings), Swift.Never>
  final public let photoOutputDidCapturePhotoSubject: Combine.PassthroughSubject<(output: AVFoundation.AVCapturePhotoOutput, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings), Swift.Never>
  final public let photoOutputDidFinishProcessingPhotoSubject: Combine.PassthroughSubject<(output: AVFoundation.AVCapturePhotoOutput, photo: AVFoundation.AVCapturePhoto, error: Swift.Error?), Swift.Never>
  final public let photoOutputDidFinishRecordingLivePhotoMovieSubject: Combine.PassthroughSubject<(output: AVFoundation.AVCapturePhotoOutput, outputFileURL: Foundation.URL, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings), Swift.Never>
  final public let photoOutputDidFinishProcessingLivePhotoSubject: Combine.PassthroughSubject<(output: AVFoundation.AVCapturePhotoOutput, outputFileURL: Foundation.URL, duration: CoreMedia.CMTime, photoDisplayTime: CoreMedia.CMTime, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings, error: Swift.Error?), Swift.Never>
  final public let photoOutputDidFinishCaptureSubject: Combine.PassthroughSubject<(output: AVFoundation.AVCapturePhotoOutput, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings, error: Swift.Error?), Swift.Never>
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willBeginCaptureFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishRecordingLivePhotoMovieForEventualFileAt outputFileURL: Foundation.URL, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingLivePhotoToMovieFileAt outputFileURL: Foundation.URL, duration: CoreMedia.CMTime, photoDisplayTime: CoreMedia.CMTime, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings, error: Swift.Error?)
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishCaptureFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings, error: Swift.Error?)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ImageCaptureModel : KIRIEngineSDK.CaptureModel {
  final public let captureProxy: KIRIEngineSDK.AVCapturePhotoCaptureProxyDelegate
  @objc required dynamic public init()
  public func takePhoto()
  override open func selectFormat(device: AVFoundation.AVCaptureDevice) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CameraView<CaptureModel> : KIRIEngineSDK.CaptureView where CaptureModel : KIRIEngineSDK.ImageCaptureModel {
  @_Concurrency.MainActor(unsafe) final public let captureModel: CaptureModel
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setPhotoFolderPath(_ path: Swift.String)
  @_Concurrency.MainActor(unsafe) public func startPreview(completion: @escaping (Swift.Result<AVFoundation.AVAuthorizationStatus, Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func takePhoto()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CaptureView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public class PrivateKey : KIRIEngineSDK.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  @objc deinit
}
extension KIRIEngineSDK.EnvType : Swift.Equatable {}
extension KIRIEngineSDK.EnvType : Swift.Hashable {}
extension KIRIEngineSDK.KIRIEngineSDKErrorType : Swift.Equatable {}
extension KIRIEngineSDK.KIRIEngineSDKErrorType : Swift.Hashable {}
extension KIRIEngineSDK.Signature.DigestType : Swift.Equatable {}
extension KIRIEngineSDK.Signature.DigestType : Swift.Hashable {}
